// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"
	deck "toggl-card-game/internal/core/deck"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

type Repo_Expecter struct {
	mock *mock.Mock
}

func (_m *Repo) EXPECT() *Repo_Expecter {
	return &Repo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *Repo) Create(ctx context.Context, _a1 *deck.Deck) (*deck.Deck, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *deck.Deck
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deck.Deck) (*deck.Deck, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deck.Deck) *deck.Deck); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deck.Deck)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deck.Deck) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *deck.Deck
func (_e *Repo_Expecter) Create(ctx interface{}, _a1 interface{}) *Repo_Create_Call {
	return &Repo_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *Repo_Create_Call) Run(run func(ctx context.Context, _a1 *deck.Deck)) *Repo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*deck.Deck))
	})
	return _c
}

func (_c *Repo_Create_Call) Return(_a0 *deck.Deck, _a1 error) *Repo_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repo_Create_Call) RunAndReturn(run func(context.Context, *deck.Deck) (*deck.Deck, error)) *Repo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *Repo) Get(ctx context.Context, id uuid.UUID) (*deck.Deck, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *deck.Deck
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*deck.Deck, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *deck.Deck); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deck.Deck)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Repo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Repo_Expecter) Get(ctx interface{}, id interface{}) *Repo_Get_Call {
	return &Repo_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *Repo_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Repo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Repo_Get_Call) Return(_a0 *deck.Deck, _a1 error) *Repo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repo_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*deck.Deck, error)) *Repo_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *Repo) Update(ctx context.Context, _a1 *deck.Deck) (*deck.Deck, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *deck.Deck
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deck.Deck) (*deck.Deck, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deck.Deck) *deck.Deck); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deck.Deck)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deck.Deck) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Repo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *deck.Deck
func (_e *Repo_Expecter) Update(ctx interface{}, _a1 interface{}) *Repo_Update_Call {
	return &Repo_Update_Call{Call: _e.mock.On("Update", ctx, _a1)}
}

func (_c *Repo_Update_Call) Run(run func(ctx context.Context, _a1 *deck.Deck)) *Repo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*deck.Deck))
	})
	return _c
}

func (_c *Repo_Update_Call) Return(_a0 *deck.Deck, _a1 error) *Repo_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repo_Update_Call) RunAndReturn(run func(context.Context, *deck.Deck) (*deck.Deck, error)) *Repo_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
